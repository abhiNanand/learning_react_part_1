
https://react.dev/learn/state-a-components-memory

State: A Component's Memory 
____________________________ 


-Think of state as a component‚Äôs memory. It helps React components remember things even when the function runs again.

Example:
-You type your name ‚Üí The form should remember what you typed.
-You add an item to the cart ‚Üí The app should remember what‚Äôs in your cart.

Since normal variables get reset every time a component re-renders, we use state to store values that should persist.

Components need to ‚Äúremember‚Äù things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called state.
==============================================================

When a regular variable isn‚Äôt enough.
++++++++++++++++++++++++++++++++++++


export default function Counter()
{

let count=0;

function handleclick()
{

    count = count+1; //updating the count
    console.log(count);//checking updated value in console.

}

return(
    <>
    
    <h2>Count:{count}</h2>
    <button onClick={handleClick}>Increment</button>
    
    </>
)

}

//after implementing this code we can see that when we click on the button in cosole we can see the the counter value is increased but on the screen we counter value is not changing. it showing 0. 
agar js hota tho add event listener me h1 ka id access karke h1 ka inner html me current counter value of show kr dete.

What‚Äôs the problem?
Even though count updates inside handleClick(), React does not re-render the component.
So, the UI still shows 0 even when you click the button.

its solution is to use useState:

Toh React me state kyun chahiye?
JavaScript me manually innerHTML update karna padta hai.
React automatically re-render karta hai jab state update hoti hai.
React ke Virtual DOM optimization ke wajah se ye zyada efficient hota hai.
==============================================================

Two things prevent change from being visiale:
1.Local variables don‚Äôt persist between renders. When React renders this component a second time, it renders it from scratch‚Äîit doesn‚Äôt consider any changes to the local variables.
2.Changes to local variables won‚Äôt trigger renders. React doesn‚Äôt realize it needs to render the component again with the new data.


To update a component with new data, two things need to happen.

1. retain data between renders.
2. Trigger React to render the component with new data (re-rendering).


The useState Hook provides those two things:

1.A state variable to retain the data between renders.
2.A state setter function to update the variable and trigger React to render the component again.

UseState is a React hook that lets you add a state varible to your component.

Syntax
_______
const [state,setState] = useState(initialState);

useState returns an array [state, setState], where:
state holds the current value.
setState(newValue) triggers a re-render of the component with the new value.
==============================================================Adding a state variable 
________________________ 

To add a state variable, import useState from React at the top of the file:


import {useState} from 'react';

then 

const [counter,setCounter]=useState(0); //array destrucutring ho rha yha pr. The array returned by useState always has exactly two items.



now conter is the state variable.setCounter is the setter function.

This is how they work together in handleClick:

function handleClick() {
  setCounter(counter + 1);
}

import {useState} from 'react';


export default function App()
{


  const [counter,setCounter]= useState(0);

function handleClick()
{

    setCounter(counter+1);
    console.log(counter);//checking updated value in console.

}

function decrement()
{


setCounter(counter-1);
console.log(counter);


}

function reset()
{
  

setCounter(0);
console.log(counter);


}



return(
    <>
    
    <h2>Count:{counter}</h2>
    <button onClick={handleClick}>Increment</button>
    <button onClick={decrement}>Decrement</button>
    <button onClick={reset}>Reset</button>
    
    </>
)

}


Recap
Use a state variable when a component needs to ‚Äúremember‚Äù some information between renders.
State variables are declared by calling the useState Hook.
Hooks are special functions that start with use. They let you ‚Äúhook into‚Äù React features like state.
Hooks might remind you of imports: they need to be called unconditionally. Calling Hooks, including useState, is only valid at the top level of a component or another Hook.
The useState Hook returns a pair of values: the current state and the function to update it.
You can have more than one state variable. Internally, React matches them up by their order.
State is private to the component. If you render it in two places, each copy gets its own state.
==========================================================

CHALLANGE 4
___________ 


ISH CODE ME JB HUM FIRST TIME CLICK KARENE THO HELLO SHOW HOGA WITHOUT NAME ABHISHEK . SECOND TIME CLICK KARENGE THO HELLO ABHISHEK SHOW HOGA. AGAR HUM NAME CHANGE KR DENGE ABHISHEK KE JAHGAH RAVI THO FIRST TIME ME HELLO ABHISHEK SHOW HOGA SECOND TIME ME HELLO RAVI SHOW HOGA. 


import { useState } from 'react';

export default function FeedbackForm() {
  const [name, setName] = useState('');

  function handleClick() {
    setName("RAVI");
    alert(`Hello, ${name}!`);
  }

  return (
    <button onClick={handleClick}>
      Greet
    </button>
  );
}

The issue in your code is that React state updates are asynchronous. When you call setName("ABHISHEK"), the state update does not happen immediately. Instead, React schedules the update, and the old value of name is used in the alert.

Why Is name Not Updated in alert?
setName("ABHISHEK") updates the state asynchronously.
The alert still uses the old value of name, which is "" (empty string).
Since name was not updated immediately, the alert shows "Hello, !" instead of "Hello, ABHISHEK!".

How to Fix It?
‚úÖ Solution 1: Use useEffect to Log the Updated State
 
==========================================================

State as a Snapshot:                                   https://react.dev/learn/state-as-a-snapshot

state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render.


it means that React state updates are not immediate. Instead of directly modifying the existing state, React takes a snapshot of the current state and schedules an update.

Understanding the Snapshot Concept with an Example
Let‚Äôs take your previous example:

import { useState } from 'react';

export default function FeedbackForm() {
  const [name, setName] = useState('');

  function handleClick() {
    setName("ABHISHEK");
    console.log(name); // ‚ùå Still logs the old value (empty string "")
  }

  return <button onClick={handleClick}>Greet</button>;
}

Why Does console.log(name) Log the Old Value?

React takes a snapshot of the state (name) at the beginning of the render.
When handleClick() is executed:
setName("ABHISHEK") schedules a state update.
But the current function execution still uses the old snapshot of name (which is "").
React then re-renders the component, and only in the new render does name have the updated value "ABHISHEK".

üëâ Setting state (setName("ABHISHEK")) does not immediately update name. It only schedules an update for the next render.
============================================================
How to See the Updated Value?
Since state updates are asynchronous, you can use useEffect to detect when the state has actually changed:
============================================================

What Does "State Updates Are Asynchronous" Mean in React?
In React, state updates do not happen immediately when you call setState(). Instead, React schedules an update and re-renders the component later. This is what we mean by state updates are asynchronous‚Äîthey don‚Äôt take effect immediately within the same function execution.

============================================================

When React re-renders a component:

-React calls your function again.
-Your function returns a new JSX snapshot.
-React then updates the screen to match the snapshot your function returned.
===========================================================