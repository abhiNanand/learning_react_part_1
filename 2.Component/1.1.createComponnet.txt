Component- Component is a reusable, independent piece of UI. It is like building block that helps in creating complex UIs by combining multiple smaller parts.
Eg-

function Greeting() {
  return <h1>Hello, World!</h1>;
}



export default function Profile() {
  return (
    <img
      src="https://i.imgur.com/MK3eW3Am.jpg"
      alt="Katherine Johnson"
    />
  )
}



//component
//export default function Component_Name() {
  return (
    // ???
  )
}
=============================================================================
??? ke jagah koi JSX code aayega.

suppose this is our code if we paste this in between we will get error

<h1>Hedy Lamarr's Todos</h1>
<img 
  src="https://i.imgur.com/yXOvdOSs.jpg" 
  alt="Hedy Lamarr" 
  class="photo"
>
<ul>
    <li>Invent new traffic lights
    <li>Rehearse a movie scene
    <li>Improve the spectrum technology
</ul>





The Rules of JSX 
_________________
1. Return a single root element 
To return multiple elements from a component, wrap them with a single parent tag.

For example, you can use a <div>:

<div>
  <h1>Hedy Lamarr's Todos</h1>
  <img 
    src="https://i.imgur.com/yXOvdOSs.jpg" 
    alt="Hedy Lamarr" 
    class="photo"
  >
  <ul>
    ...
  </ul>
</div>
If you don‚Äôt want to add an extra <div> to your markup, you can write <> and </> instead:

<>
  <h1>Hedy Lamarr's Todos</h1>
  <img 
    src="https://i.imgur.com/yXOvdOSs.jpg" 
    alt="Hedy Lamarr" 
    class="photo"
  >
  <ul>
    ...
  </ul>
</>
This empty tag is called a Fragment. Fragments let you group things without leaving any trace in the browser HTML tree.

https://react.dev/reference/react/Fragment
read about fragement.

<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.

<>
  <OneChild />
  <AnotherChild />
</>

==========================================================================
React components are regular JavaScript functions, but their names must start with a capital letter or they won‚Äôt work!
Steps to build component
________________________ 

1. Export the componenet- it mark the main function in the file so that we can import it from other files.
refer this link to study more about export and import of component
https://react.dev/learn/importing-and-exporting-components

2. Define the function
   
   let take a function Profile
   
   function Profile()
   {

   }

3. Add markup

   the component return the img tag with src and alt attributes.
   here <img/> is writtern like html but here this syntax is jsx.

   return statement should be in one line.
   
   return <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />;

   if your markup is not on the same line as the return keyword. you must wrap it in the pair of parentesis.

   return( <div>
    <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson"/>
   )      </div>
 Without parentheses, any code on the lines after return will be ignored!
 
 =========================================================================
 Using a component 

 we had define Profile component, we can nest it inside other componnets. for example, we can export a Gallary componnet that uses multiple Profile componenet.

 funtion Profile()
 {

return 
(

<img 
src="link"
alt="image"
/>) ; }

export default function Gallery()
{
  return(
    <section>
  <h1> Amazing scientist </h1>
  <Profile/>
  <Profile/>
  <Profile/>
    </section>
  )
}
Notice the difference in casing:

<section> is lowercase, so React knows we refer to an HTML tag.
<Profile /> starts with a capital P, so React knows that we want to use our component called Profile.

Because the Profile components are rendered inside Gallery‚Äîeven several times!‚Äîwe can say that Gallery is a parent component, rendering each Profile as a ‚Äúchild‚Äù. This is part of the magic of React: you can define a component once, and then use it in as many places and as many times as you like.

==========================================================================

export default function Gallery() {
  // üî¥Never define a component inside another component!
  function Profile() {
    // ...
  }
  // ...
}
this is very slow and cause bugs. always define every component at the top level:


==========================================================================
Recap
You‚Äôve just gotten your first taste of React! Let‚Äôs recap some key points.

React lets you create components, reusable UI elements for your app.

In a React app, every piece of UI is a component.

React components are regular JavaScript functions except:

Their names always begin with a capital letter.
They return JSX markup.
==========================================================================

export default function App()
{

  return (
    <div>
      <h1>The image is here </h1> 
   <Profile/>
    </div>  // First root element closes here


     <div>
    <Profile />
    </div>  // ‚ùå Second root element (causes error)

  )
} 

This code will show error
why?
JSX must return a single parent element, but you have two separate <div> elements at the top level inside the return statement.

To fix this
___________
‚úÖ Option 1: Wrap Everything in a Single <div>
 

export default function App() {
  return (
    <div>
      <h1>The image is here</h1>
      <Profile />
      <div>
        <Profile />
      </div>
    </div>
  );
}

=======================================================

‚úÖ Option 2: Use a React Fragment (<>...</>)
If you don't want an extra <div>, use React Fragments:
 
export default function App() {
  return (
    <>
      <div>
        <h1>The image is here</h1>
        <Profile />
      </div>
      <div>
        <Profile />
      </div>
    </>
  );
}
‚úî Fragments (<>...</>) act as a wrapper without adding extra elements to the DOM.

========================================================


