Passing Props to a component
____________________________ 

-React component uses props to communicate with each other. 
-Every parent component can pass some information to its child components by giving them props. 
-Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions.


What is Props?
-Props are the information that we pass to a JSX tag. 
for example, ClassName, src, alt, width and height are some of the props we pass to an <img>:

Example:

function Avatar()
{
    return 
    (

<img 
className="avtar"
src=
alt=
widht={100}
height={100}
/>

    );
}

export default function Profile()
{
    return 
    (
        <Avatar/>
    )
}


=============================================================================
Passing props to a component 

In this code, the Profile component isn’t passing any props to its child component, Avatar:

export default function Profile() {
  return (
    <Avatar />
  );
}

You can give Avatar some props in two steps.

Step 1: Pass props to the child component 
_________________________________________ 
pass some props to Avatar. for example, let pass two props: person(an object), and size(a number);

export default function Profile()
{
    return 
    (
        <Avatar
        person={{name:'Abhishek Anand',imageId:'12107819'}}
        size={100}>/
    );
}


Now you can read these props inside the Avatar component.

=============================================================================
Step 2: Read props inside the child component 
We can read these props by listing their names person, size seperated by commas inside  ({ and })     directly after function avatar. 

function Avatar({person, size})
{
    //person and size are available here 
}

___________________________________________ 

using person and size props inside in avtar 


import {getImageUrl} from './utils.js';

function Avatar({person,size})
{
    return (
        <img 
         className='avatar'
         src={getImageUrl(person)}
         alt={person.name}
         width={size}
         height={size}
         />
    )
}



 export default function Profile()
{
    return 
    (
        <div>

        <Avatar
        person={{ name: 'Katsuko Saruhashi', 
          imageId: 'YfeOqp2'}}
        size={100}
         />
  
        <Avatar
        person={{ name: 'Aklilu Lemma', 
          imageId: 'OKS67lh'}}
        size={70}
         />



         <Avatar
        person={{ name: 'Lin Lanying',
          imageId: '1bX5QH6'}}
        size={60}
         />
        </div>

        
    );
}
=============================================================================

function Avatar(props)
{
    let person = props.person;
    let size = props.size;
    //..
}
Usually you don’t need the whole props object itself, so you destructure it into individual props.
Destructuring is done here.
=============================================================================
Giving default value if no value is given 
function Avatar({person,size=100})
{
    //..
}
The default value is only used if the size prop is missing or if you pass size={undefined}. But if you pass size={null} or size={0}, the default value will not be used.
--------------------------------------------


Forwarding props with the JSX spread syntax 
___________________________________________ 

Sometimes, passing props gets very repetitive:

function Profile ({person,size,isSepia, isSepia, thickBorder})
{

}

use spread 
function Profile(props)
{
    return (

        <div className="card">
        <Avatar {...props} />
        </div>
    );
}
This forwards all of Profile’s props to the Avatar without listing each of their names.




Sometimes you’ll want to nest your own components the same way:

<Card>
  <Avatar />
</Card>


see example from here:
https://react.dev/learn/passing-props-to-a-component

============================================================================

How props change over time
__________________________ 

do this when you done with use state  and use effect. 


in clock example we can observe

a component may receive different props over time. Props are not always static! Here, the time prop changes every second, and the color prop changes when you select another color. Props reflect a component’s data at any point in time, rather than only in the beginning
However, props are immutable—a term from computer science meaning “unchangeable”. When a component needs to change its props (for example, in response to a user interaction or new data), it will have to “ask” its parent component to pass it different props—a new object! Its old props will then be cast aside, and eventually the JavaScript engine will reclaim the memory taken by them.
=============================================================================

Recap
To pass props, add them to the JSX, just like you would with HTML attributes.
To read props, use the function Avatar({ person, size }) destructuring syntax.
You can specify a default value like size = 100, which is used for missing and undefined props.
You can forward all props with <Avatar {...props} /> JSX spread syntax, but don’t overuse it!
Nested JSX like <Card><Avatar /></Card> will appear as Card component’s children prop.
Props are read-only snapshots in time: every render receives a new version of props.
You can’t change props. When you need interactivity, you’ll need to set state.
===========================================================

In this code we can observe that in two ways props are passess.

import Avatar from './Avatar.js';

function Card({ children }) {
  return (
    <div className="card">
      {children}
    </div>
  );
}

export default function Profile() {
  return (
    <Card>
      <Avatar
        size={100}
        person={{ 
          name: 'Katsuko Saruhashi',
          imageId: 'YfeOqp2'
        }}
      />
    </Card>
  );
}

there is a difference between <FunctionName /> and <FunctionName> ... </FunctionName> in JSX (JavaScript XML).

1. Self-Closing Tag: <FunctionName />
This syntax is used when a component does not have any children.
It is a shorthand for an empty element.
Example:
 
<Avatar size={100} person={{ name: 'Katsuko Saruhashi', imageId: 'YfeOqp2' }} />

Equivalent to:

<Avatar size={100} person={{ name: 'Katsuko Saruhashi', imageId: 'YfeOqp2' }}></Avatar>

==============================================================
2. Opening and Closing Tags: <FunctionName> ... </FunctionName>
This syntax is used when a component has child elements inside it.
The content inside the tags is passed as children to the component.

<Card>
  <Avatar size={100} person={{ name: 'Katsuko Saruhashi', imageId: 'YfeOqp2' }} />
</Card>


Here, the <Avatar /> component is passed as children to the Card component.


When to Use Each?
Use self-closing (<Component />) when there are no children.
Use opening & closing tags (<Component>...</Component>) when you need to pass children.
In your code:

<Avatar /> is self-closing because it does not wrap any content.
<Card> ... </Card> is using the opening and closing tag format because it wraps child elements (Avatar component).
==============================================================

Note:

return  //; ye mana jayega
(
//wrong
)

return ke niche brackt hoga tho vo galat hai. return ke aagey ; mana jayega.
so this one is correct. 
return(
//right;
)


================+============================================







`${value}`  -- this can be also used in jsx.